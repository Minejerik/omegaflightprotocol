syntax = "proto2";

// I know "required" is deprecated, but in this scenario, it makes sense.
// as why should a Location message be accepted, if it is missing location data?

package ofcommon;

message Location {
    // General Lat-Long-Alt location
	required float lat = 1;
	required float long = 2;
	required float alt = 3;
}

message Waypoint {
    // Waypoint, used by Mission
    // Index is not required, as the order sent will be preserved
	// required int32 index = 1;
    // Waypoint's can no longer have names, as that is extra data that needs to be sent.
	// optional string name = 2;
	required Location loc = 1;
	optional Action action = 2;
}

message WaypointIndex {
    // Used to communicated the index of a waypoint in a mission, working on better solution
	required int32 index = 1;
}

message Action {
    // This represents an action that is performed after a waypoint is reached.
	// name will probably not be used in stock OF

	enum ActionType {
        // Triggers a GPIO pin, on the client pilot computer
		PIN_TRIGGER = 1;
        // Sends an alert back to the server
		SEND_ALERT = 2;
        // Tells the client to either land here, or back at set home location
		LAND_HERE = 3;
		LAND_HOME = 4;
        // Just stays still for n seconds
		SLEEP = 5;
	}
	
	required ActionType type = 1;
    // These are only used for specific action types
	optional int32 pin = 2;
	optional int32 sleep_time = 3;
}
	
message Mission {
    // The index is just the "ID" of the mission
	repeated Waypoint waypoints = 1;
    required int32 index = 2;
    // Missions are no longer allowed to have a name on the client side
    // Server may keep names for UI purposes
	// optional string name = 2;
}
	
message MissionIndex {
    // Just the "ID" for the mission, used to communicate which missions are cached.
	required int32 index = 1;
	// optional string name = 2;
}

message Command {
    // Just used a general "Command", take off, land, etc..
    // Used when data is not required to be sent
    // Currently only being used by client to server, but may be expanded to both, 
    // hence the inclusion in the common protocol.
    enum CommandType {
        // "TAKE_OFF" has different behaviour based on mode,
        // in manual, just takes off to hard-coded altitude AGL, 20 ft for example
        // in mission-mode, will start the mission, if queued, if not, will return error message
        TAKE_OFF = 1;

        // "LAND" types are only to be used during "manual mode" of operation 
        LAND_HERE = 2;
        LAND_HOME = 3;

        // Used to get mission index data from client
        MISSION_INDEX_DATA = 4;
    }

    required CommandType cmd = 1;
}

message Error {
    // General error, can be sent by client or server
    // But mostly will be sent by client due to breach of required behaviour
    // In the future the server might send as well, thus warrenting inclusion the common file
    // Depending on error type, it can be sent to user, or dealt with by server, or both
    enum ErrorType {
        // Mission-mode errors
        NO_MISSION_QUEUED = 1;
        MISSION_DOESNT_EXIST = 2;
        // General errors
        NO_HOME_SET = 3;
        IN_FLIGHT_CAN_NOT_CHANGE = 4;
        WRONG_MODE = 5;
        NOT_IN_FLIGHT_CANT_EXECUTE = 6;
    }

    required ErrorType err = 1;
}